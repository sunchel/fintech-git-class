1
2
3
34
34
6

# 버전을 어떻게 만드는지 말해줌.
# 1  git에게 add work.txt  => 깃에게 work.txt를 지금부터 버전관리할거야.
# git commit -m "work 1" 라고 쓰면 깃에게 새로운 버전을 만들어서 제출할거야. 작업한 메시지는 'work 1'이다. -m이란 메세지란 의미

# git config --global user.name "egoing"  .깃에게 컴퓨터 사용자의 이름은 egoing 이야 각각 만든 사람은 egoing이야.
# 위쪽 화살표 키 쓰면 금방 썼던거 자동으로 나온다.
# git config --global user.email "egoing@gmail.com" 깃에게 컴퓨터 사용자의 이메일은 이거야.

# C create 버전 만들기
# R Read 버전 보기
# U Update 
# D Delete

# git log   => 깃아, 지금까지 내가 만든 버전의 역사를 출력해봐
# git status 깃에게 현재 내 저장소의 상태를 알려줘. 항상 해야 하는 것 현재 저장소의 상태를 체크하기
# git status에서 변화된 것을 알려면 작업한 것을 저장해야 한다. "ctrl + s" 로 저장해라.

# 1. 현재 상태보기 git status
# 2. 수정하고 git status 하기 / 마지막 버전 이후에 수정됨.
# 3. git add work.txt  해서 add하기

# 0. my work 폴더 만든 후
# 1. git init . => .git이라는 폴더가 생김 , 이것은 저장소(repository)라고 함.
#  git 폴더 제외한 것은 working directory 임
#
# 두 번째과제 복수의 파일을 하기
# 일단 어디있는지 확인 
# 핵심은 git add work.txt    /  git commit --m "work"
#  -> git add work.txt 
#     git add work.txt
# untracked files => 깃은 모두 수동이다. 정교하게 하기 위해서. 파일생성하면 깃은 자동적으로 추적하지 않는다.
# 우리가 명시적으로 깃에게 work2, work3에 대해 버전관리할 거라고 해야 함. 즉 untracked files 아래에 있는 것은 git add 안 한 것.
# git add 2대 의미 첫째, 새로 추가된 파일을 깃에게 추적시키는 것.관리시키는 등록의 의미 
#                  둘째, working작업한 파일을 stage area에 보내는 것
#                추적되지 않는 파일을 git add 하면 추적되면서 stage 들어감

# 버전관리되지 않는 것을 관리. stage area로 보냄
# 녹색과 빨간색의 차이
# 커밋대기상태우킹 
# 빨간색에서 git add를 하고 그러면 stage area로 간다(녹색) 이상태에서 commit 하면 저장소에 버전으로 올라간다.
# 바로 커밋하면 안되는데, working dir에서 git add 하면 stage area로 가고
# stage area에 있는 것을 git commit 하면 repository로 간다.
